// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/data/dto/chat/chat_dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4509680556187824438),
      name: 'ChatDto',
      lastPropertyId: const obx_int.IdUid(3, 8535002487263393422),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2778764273566991227),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3513328738708619677),
            name: 'chatName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8535002487263393422),
            name: 'messagesStr',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 4509680556187824438),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [8802184735862207241, 5212056870157725108],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5377833890683866083,
        7288776306462640916,
        8709646139571838624,
        8212981350025157795,
        5473782613475054051,
        5759576526457048768
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ChatDto: obx_int.EntityDefinition<ChatDto>(
        model: _entities[0],
        toOneRelations: (ChatDto object) => [],
        toManyRelations: (ChatDto object) => {},
        getId: (ChatDto object) => object.id,
        setId: (ChatDto object, int id) {
          object.id = id;
        },
        objectToFB: (ChatDto object, fb.Builder fbb) {
          final chatNameOffset = object.chatName == null
              ? null
              : fbb.writeString(object.chatName!);
          final messagesStrOffset = object.messagesStr == null
              ? null
              : fbb.writeList(object.messagesStr!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, chatNameOffset);
          fbb.addOffset(2, messagesStrOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatDto()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..chatName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..messagesStr = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChatDto] entity fields to define ObjectBox queries.
class ChatDto_ {
  /// See [ChatDto.id].
  static final id =
      obx.QueryIntegerProperty<ChatDto>(_entities[0].properties[0]);

  /// See [ChatDto.chatName].
  static final chatName =
      obx.QueryStringProperty<ChatDto>(_entities[0].properties[1]);

  /// See [ChatDto.messagesStr].
  static final messagesStr =
      obx.QueryStringVectorProperty<ChatDto>(_entities[0].properties[2]);
}
